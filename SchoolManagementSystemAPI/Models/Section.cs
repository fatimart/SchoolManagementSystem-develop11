//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchoolManagementSystemAPI.Models
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;

    public partial class Section
    {
        public SchoolMSEntities ty = new SchoolMSEntities();

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Section()
        {
            this.StudentGrades = new HashSet<StudentGrade>();
            this.TeacherCourses = new HashSet<TeacherCours>();
            this.TimeTables = new HashSet<TimeTable>();
        }
    
        public int SectionID { get; set; }
        public int SectionNum { get; set; }
        public int CourseID { get; set; }
        public int RoomID { get; set; }
        public string Time { get; set; }
    
        public virtual Course Course { get; set; }
        public virtual Room Room { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<StudentGrade> StudentGrades { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<TeacherCours> TeacherCourses { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<TimeTable> TimeTables { get; set; }

        private ObservableCollection<Section> _sectionRecord;
        public ObservableCollection<Section> AllSections
        {
            get
            {
                return _sectionRecord;
            }
            set
            {
                _sectionRecord = value;
            }
        }

        public List<Section> GetAll1 ()
        {
            return ty.Sections.ToList();
        }

        public void GetAll ()
        {
            AllSections = new ObservableCollection<Section>();
            GetAll1().ForEach(data => AllSections.Add(new Section()
            {
                SectionID = data.SectionID,
                SectionNum = data.SectionNum,
                CourseID = data.CourseID,
                RoomID = data.RoomID,
                Time = data.Time


            }));

        }

        //MARK: DataAcesss
        public void AddSection ( int sectionNum, int courseID, int RoomID, string time )
        {
            if (!checkSectionExists(sectionNum, courseID))
            {
                Section section = new Section();
                section.SectionNum = sectionNum;
                section.CourseID = courseID;
                section.RoomID = RoomID;
                section.Time = time;

                ty.Sections.Add(section);
                ty.SaveChanges();
            }
           
        }


        public void UpdateSection ( int sectionNum, int courseID, int RoomID, string time )
        {

            Section updateSection = (from m in ty.Sections
                                     where m.SectionNum == sectionNum
                                     where m.CourseID == courseID
                                     select m).Single();

            updateSection.SectionNum = sectionNum;
            updateSection.CourseID = courseID;
            updateSection.RoomID = RoomID;
            updateSection.Time = time;

            ty.SaveChanges();


        }

        public void DeleteSection ( int sectionNum, int courseID )
        {

            if (checkSectionExists(sectionNum, courseID))
            {
                var deleteSection = (from m in ty.Sections
                                     where m.SectionNum == sectionNum
                                     where m.CourseID == courseID
                                     select m).Single();

                ty.Sections.Remove(deleteSection);
                ty.SaveChanges();
            }
           
        }

        public bool checkSectionExists ( int sectionNum, int CourseID )
        {
            if (ty.Sections.Any(o => o.CourseID == CourseID && o.SectionNum == sectionNum))
            { return true; }
            else
            {
                return false;
            }
        }

    }
}
