//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchoolManagementSystemAPI.Models
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;

    public partial class Room
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Room()
        {
            this.Sections = new HashSet<Section>();
        }
    
        public int RoomID { get; set; }
        public string RoomNum { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Section> Sections { get; set; }

        private ObservableCollection<Room> _RoomRecord;
        public ObservableCollection<Room> AllRooms
        {
            get
            {
                return _RoomRecord;
            }
            set
            {
                _RoomRecord = value;
            }
        }

        public SchoolMSEntities ty = new SchoolMSEntities();
        public List<Room> GetAll1 ()
        {
            return ty.Rooms.ToList();
        }

        public void GetAll ()
        {
            AllRooms = new ObservableCollection<Room>();
            GetAll1().ForEach(data => AllRooms.Add(new Room()
            {

                RoomID = data.RoomID,
                RoomNum = data.RoomNum

            }));

        }

        //MARK: DataAccess function
        public void AddRoom ( string RoomNum )
        {

            Room room = new Room();
            room.RoomNum = RoomNum;

            ty.Rooms.Add(room);
            ty.SaveChanges();

        }


        public void UpdateRoom ( int RoomID, string RoomNum )
        {

            Room updateRoom = (from m in ty.Rooms where m.RoomID == RoomID select m).Single();
            updateRoom.RoomID = RoomID;
            updateRoom.RoomNum = RoomNum;
            ty.SaveChanges();

        }

        public void DeleteRoom ( int RoomID )
        {

            var deleteRoom = ty.Rooms.Where(m => m.RoomID == RoomID).Single();
            ty.Rooms.Remove(deleteRoom);
            ty.SaveChanges();

        }
        
        public bool CheckRoomID ( int roomID )
        {

            if (ty.Rooms.Any(o => o.RoomID == roomID))
            {
                return true;
            }
            else
            {
                return false;
            }

        }


    }
}
